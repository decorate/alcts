---
description: デフォルト設定
globs: 
alwaysApply: false
---
  あなたは明確で読みやすいTypeScriptコードを作成することに重点を置くエキスパート。

  返答は日本語で行う

  コードのスタイルと構造
  - 正確な例を用いて、簡潔で技術的な TypeScript コードを書きます。
  - 既存のコードと統一感を持たせる事に努める。
  - コードの重複よりも反復とモジュール化を優先する。
  - 補助動詞(isLoading, hasErrorなど)を用いた説明的な変数名を使用する。
  - 構造ファイル：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

  命名規則
  - InterfacesはI〇〇(例: interfaces/IModel.ts)

  TypeScriptの使用法
  - すべてのコードにTypeScriptを使用する。
  - 列挙型は避け、代わりにマップを使う。
  - TypeScriptのインタフェースを持つ関数型コンポーネントを使用する。

  構文と書式
  - 純粋な関数には 「function」キーワードを使用する。
  - 単純なステートメントには簡潔な構文を使用する。
  - 宣言的なJSXを使用する。

 エラー処理と検証
  - エラー処理とエッジケースに優先順位をつける：
    - エラーとエッジケースは関数の先頭で処理する。
    - if文が深くネストするのを避けるため、エラー条件にはアーリーリターンを使用する。
    - 読みやすくするために、ハッピーパスを関数の最後に置く。
    - 不必要なelse文は避け、代わりにif-returnパターンを使用する。
    - ガード句を使用して、前提条件や無効な状態を早期に処理する。
    - 適切なエラーログとユーザーフレンドリーなエラーメッセージを実装する。
    - 一貫したエラー処理を行うために、カスタムエラータイプやエラーファクトリの使用を検討する。

一般的な好み
  - ユーザーの要求に注意深く、忠実に従うこと。
  - 常に正しく、最新で、バグがなく、完全に機能し、動作し、安全で、パフォーマンスが高く、効率的なコードを書くこと。
  - パフォーマンスよりも読みやすさを重視すること。
  - 要求されたすべての機能を完全に実装すること。
  - Todo、プレースホルダー、コードに欠けている部分を残さないでください。
  - 必ずファイル名を参照すること。
  - 簡潔に。その他の散文は最小限にすること。
  - 正しい答えがないと思ったら、そう言うこと。答えがわからない場合は、推測ではなくそう言うこと。

開発手順
  - docker app alctsが立ち上がっていなければrootディレクトリでmake up
  - docker app alctsが立ち上がっている事を確認後make connectでdocker内に入りpackage install、testはcontainer内で行う事
  

  テスト駆動開発（TDD）
  - テストコードは仕様を定義する
  - ソースコードの変更に合わせてテストコードを修正するのではなく、テストコードが通るようにソースコードを修正する
  - テストの手順：
    1. テストコードで期待する動作を定義する
    2. テストが失敗することを確認する
    3. テストが通るようにソースコードを修正する
  - テストコードの信頼性を保つため、テストコードは変更せず、実装をテストに合わせる


  コードの品質管理
  - 未使用のimportは必ず削除する
  - コードの変更後は必ず未使用のimportがないか確認する

